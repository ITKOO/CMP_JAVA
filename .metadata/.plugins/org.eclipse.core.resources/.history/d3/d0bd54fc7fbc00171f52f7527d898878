package magicpass;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutionException;

import javax.swing.JOptionPane;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.tasks.Task;
import com.google.firebase.tasks.Tasks;

import model.MagicPassUser;
import model.User;

public class MagicPass 
{
	MagicPassUser mpUser;
	int count;
	int mpCount;
	
	public void saveMagicPassData(int saveCount)
	{
		
		 final FirebaseDatabase database = FirebaseDatabase.getInstance();
         DatabaseReference ref = database.getReference("CMP/");

         DatabaseReference usersRef = ref.child("users");

         Map<String, MagicPassUser> magicPassUsers = new HashMap<String, MagicPassUser>();

         magicPassUsers.put("MagicPass",new MagicPassUser(saveCount));
        
         usersRef.setValue(magicPassUsers);
         
         System.out.println("Log : saveMagicPassData() : putData");
         
         Task<Void> task = ref.setValue(magicPassUsers);
         
         try 
         {
         	System.out.println("Log : saveMagicPassData() :  await");
            Tasks.await(task);
         } 
         
         catch (ExecutionException e) 
         {
         	e.printStackTrace();
         }
         
         catch(InterruptedException e)
         {
         	e.printStackTrace();
         }
		
	} // end of saveData
	
	public void getMagicPass()
	{
		final FirebaseDatabase database = FirebaseDatabase.getInstance();
		DatabaseReference ref = database.getReference("CMP/MagicPass");
		
		// Attach a listener to read the data at our posts reference
		ref.addValueEventListener(new ValueEventListener() 
		{	 
		    public void onDataChange(DataSnapshot dataSnapshot) 
		    {
		       mpUser = dataSnapshot.getValue(MagicPassUser.class);
		        System.out.println("제발요" + mpUser);
		        System.out.println(mpUser.count);
		        mpCount = mpUser.count;
		    }

		    public void onCancelled(DatabaseError databaseError) 
		    {
		        System.out.println("The read failed: " + databaseError.getCode());
		    }
		});
		
		try 
		{
			Thread.sleep(20000);
		} 
		catch (InterruptedException e) 
		{
			e.printStackTrace();
		}
		
		System.out.println("Log : count : " + mpUser.count);
	} // end of checkMagicPass
	
	public void checkMagicPass()
	{
		switch (mpCount) 
		{
			case 0:
				JOptionPane.showMessageDialog(null, "CMP 매점 매직패스 성공하셨습니다.");
				System.out.println("Log : case 0 ->  count : " + mpCount);
				saveMagicPassData(1);
				System.out.println("Log : case 0 ->  count : " + mpCount);
				break;
				
			case 1:
				System.out.println("Log : case 1 기존 ->  count : " + mpCount);
				saveMagicPassData(2);
				System.out.println("Log : case 1 ->  count : " + mpCount);
				break;
				
			case 2:
				System.out.println("Log : case 2 기존 ->  count : " + mpCount);
				saveMagicPassData(3);
				System.out.println("Log : case 2 ->  count : " + mpCount);
				break;
			
			case 3:
				System.out.println("Log : case 3 기존 ->  count : " + mpCount);
				saveMagicPassData(4);
				System.out.println("Log : case 3 ->  count : " + mpCount);
				break;
				
			case 4:
				System.out.println("Log : case 4 기존 ->  count : " + mpCount);
				saveMagicPassData(5);
				System.out.println("Log : case 4 ->  count : " + mpCount);
				break;
				
			case 5:
				System.out.println("Log : case 5 기존->  count : " + mpCount);
				System.out.println("초과!");
				System.out.println("Log : case 5 ->  count : " + mpCount);
				break;	
				

			default:
				System.out.println("오류!");
				break;
		} // end of switch
	} // end of checkMagicPass
} // end of MagicPass
